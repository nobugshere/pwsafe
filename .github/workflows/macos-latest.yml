# This is the workflow to build pwsafe.app for macOS (OSX)
# This file is also read by the osx-build-wx script to fetch the
# parameters for a manual build.

name: mac-pwsafe

# Controls when the action will run. Triggers the workflow on all push requests,
# or pull request for the master branch, or on demand.
on:
  push:
#    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_mac_pwsafe:
    name: Build pwsafe for macOS
    # The type of runner that the job will run on
    runs-on: macos-15

    env:
      # If you need to rebuild wxWidgets for some reason, say you changed the build params, just increment FORCE_REBUILD_WX
      # Some useful debug parameters:
      # "WX_DEBUG_FLAG: --enable-debug --enable-debug_info"
      # "XCODE_CONFIG:  Debug"
      # "XCODE_CONFIG:  Debug-no-yubi"
      WX_VERS:          3.2.8
      WX_SRC_DIR:       ${{ github.workspace }}/wxWidgets
      WX_BUILD_DIR:     ${{ github.workspace }}/wxWidgets/static-release
      WX_ARCH:          "arm64,x86_64"
      WX_DEBUG_FLAG:    "--disable-debug"
      MACOS_VER_MIN:    10.14
      XCODE_VER:        "26.0"
      XCODE_CONFIG:     Release
      XCODE_DIR:        ${{ github.workspace }}/xcderived
      XCODE_PROD:       ${{ github.workspace }}/xcderived/Build/Products
      FORCE_REBUILD_WX: 1

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    - name: Set additional build parameters
      run: |
        echo "HOST_NCPU=`sysctl -n hw.ncpu`" >>$GITHUB_ENV

    - name: Force compatible Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${XCODE_VER}.app

    - name: Print Xcode version in use
      run: xcode-select -p
      
    - name: Install dependencies for creating dmg
      # gettext is already installed in the runner image
      run: brew install create-dmg googletest

    - name: Install tools for Yubikey build
      run: brew install autoconf automake libtool

    # The Yubico repos don't maintain tags, so checkout specific commits for the sake of safety and repeatability
    # These are the master HEAD commits as of 2024-02-08 (Last confirmed: 2025-02-18)
    - name: Build libyubikey from upstream
      run: |
        git clone --no-checkout https://github.com/Yubico/yubico-c.git
        cd yubico-c
        git checkout e4334554857b0367085cbf845bf87dd92433e020
        autoreconf --install
        ./configure --disable-shared --disable-documentation CFLAGS="-O2 -arch arm64 -arch x86_64 -mmacosx-version-min=$MACOS_VER_MIN"
        make -j $HOST_CPU check
        sudo make install

    - name: Build ykpers from upstream
      run: |
        git clone --no-checkout https://github.com/Yubico/yubikey-personalization.git
        cd yubikey-personalization
        git checkout db0c0d641d47ee52e43af94dcee603d76186b6d3
        autoreconf --install
        ./configure --disable-shared --disable-documentation CFLAGS="-O2 -arch arm64 -arch x86_64 -mmacosx-version-min=$MACOS_VER_MIN"
        make -j $HOST_CPU check
        sudo make install

    - name: Cache wxWidgets build
      id: cache-wxWidgets-build
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.WX_BUILD_DIR }}
          ${{ env.WX_SRC_DIR }}/locale
        key: wx-${{ env.WX_VERS }}-macOS-${{ env.MACOS_VER_MIN }}-Xcode-${{ env.XCODE_VER }}-build-${{ env.FORCE_REBUILD_WX }}

    - name: Checkout wxWidgets
      if: steps.cache-wxWidgets-build.outputs.cache-hit != 'true'
      run: git clone --branch v$WX_VERS --single-branch https://github.com/wxWidgets/wxWidgets.git $WX_SRC_DIR

    - name: Build wxWidgets
      if: steps.cache-wxWidgets-build.outputs.cache-hit != 'true'
      working-directory: ${{ env.WX_SRC_DIR }}
      run: |
        git -C $WX_SRC_DIR submodule update --init
        rm -rf $WX_BUILD_DIR
        mkdir -p $WX_BUILD_DIR
        cd $WX_SRC_DIR
        # use built-in versions of jpeg, tiff, png, and regex (pcre2) libs to avoid linking with those in /usr/local/opt
        ./configure --enable-universal_binary=$WX_ARCH --prefix=$WX_BUILD_DIR --disable-shared --enable-unicode --with-macosx-version-min=$MACOS_VER_MIN --with-libpng=builtin --with-libjpeg=builtin --with-libtiff=builtin --with-regex=builtin --without-liblzma $WX_DEBUG_FLAG
        make -j $HOST_NCPU
        cd locale; make allmo; cd ..
        sudo make install
        du -sh $WX_BUILD_DIR

    - name: Generate and print xcconfigs
      working-directory: ${{ github.workspace }}
      run: |
        Xcode/generate-configs -r $WX_BUILD_DIR/bin/wx-config > Xcode/pwsafe-release.xcconfig
        cat Xcode/pwsafe-release.xcconfig
    
    - name: Build pwsafe and test programs
      working-directory: ${{ github.workspace }}
      run: xcodebuild -derivedDataPath $XCODE_DIR -project Xcode/pwsafe-xcode6.xcodeproj -scheme All -configuration $XCODE_CONFIG

    - name: Run coretest
      working-directory: src/test
      run: $XCODE_PROD/$XCODE_CONFIG/coretest

    - name: Run pwsafe-cli-test
      working-directory: ${{ github.workspace }}
      run: $XCODE_PROD/$XCODE_CONFIG/pwsafe-cli-test

    - name: Install language files and create dmg
      working-directory: install/macosx
      run: make RELDIR=$XCODE_PROD/$XCODE_CONFIG

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PasswordSafe-macOS.${{ github.sha }}
        path: PasswordSafe-macOS*.dmg
        if-no-files-found: error
